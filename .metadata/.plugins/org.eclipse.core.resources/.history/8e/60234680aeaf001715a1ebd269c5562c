/* Wrapper functions for ENSC-351, Simon Fraser University, By
 *  - Craig Scratchley
 * 
 * These functions may be re-implemented later in the course.
 */

#include <unistd.h>			// for read/write/close
#include <fcntl.h>			// for open/creat
#include <sys/socket.h> 		// for socketpair
#include "SocketReadcond.h"
#include <mutex>
#include <thread>
#include <condition_variable>
#include <iostream>

#define NUMBER_OF_PAIRS 2
#define SOCKET_PAIR_START_INDEX 3

struct ThreadLocker {

	int count = 0;
	int pairDes = -1;
	//std::mutex mutexCounter;
	//std::condition_variable condition_var;
};

ThreadLocker threadLockers [(NUMBER_OF_PAIRS * 2) + 5]; // Add 5 to allow for extra sockets such as cout, cin, cerr

int mySocketpair( int domain, int type, int protocol, int des[2] )
{
	int returnVal = socketpair(domain, type, protocol, des);


	threadLockers[des[0]] = ThreadLocker(des[1]);
	threadLockers[des[1]] = ThreadLocker(des[0]);

	return returnVal;
}

int myOpen(const char *pathname, int flags, mode_t mode)
{
	return open(pathname, flags, mode);
}

int myCreat(const char *pathname, mode_t mode)
{
	return creat(pathname, mode);
}

ssize_t myRead( int fildes, void* buf, size_t nbyte )
{




	return read(fildes, buf, nbyte );
}

ssize_t myWrite( int fildes, const void* buf, size_t nbyte )
{
	int bytesWritten = 0;

	// #1: Lock
//	lock_guard<mutex> lgLock();

	// #2: Write Changes

	// #3: Increment buffer counter

	// #4: Return the number of bytes written

	return write(fildes, buf, nbyte );

	// #5: Unlock mutex (after function exits)
}

int myClose( int fd )
{
	return close(fd);
}

int myTcdrain(int des)
{
	//is also included for purposes of the course.
	return 0;
}

int myReadcond(int des, void * buf, int n, int min, int time, int timeout)
{
	return wcsReadcond(des, buf, n, min, time, timeout );
}

